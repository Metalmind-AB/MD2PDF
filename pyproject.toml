[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "md2pdf"
version = "1.1.4"
description = "Beautiful Markdown to PDF converter with professional styling"
readme = "README.md"
license = "MIT"
authors = [
    {name = "MPS Metalmind AB", email = "info@metalmind.se"},
]
maintainers = [
    {name = "MPS Metalmind AB", email = "info@metalmind.se"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Text Processing :: Markup",
    "Topic :: Office/Business",
]
keywords = ["markdown", "pdf", "converter", "documentation", "publishing", "typesetting"]
dependencies = [
    "markdown>=3.5.0,<4.0",
    "weasyprint>=66.0,<67.0",
    "pygments>=2.15.0,<3.0",
    "beautifulsoup4>=4.12.0,<5.0",
    "click>=8.0.0,<9.0",
    "rich>=13.0.0,<14.0",
    "pydantic>=2.0.0,<3.0",
    "python-docx>=0.8.11,<1.0",
    "PyYAML>=6.0,<7.0",
    "Pillow>=10.0.0,<11.0",
    "emoji>=2.0.0,<3.0",
]
requires-python = ">=3.9"

[project.urls]
Homepage = "https://github.com/mps-metalmind/md2pdf"
Documentation = "https://md2pdf.readthedocs.io"
Repository = "https://github.com/mps-metalmind/md2pdf.git"
"Bug Reports" = "https://github.com/mps-metalmind/md2pdf/issues"
Changelog = "https://github.com/mps-metalmind/md2pdf/blob/main/CHANGELOG.md"

[project.scripts]
md2pdf = "md2pdf.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.12",
    "flake8>=6.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
    "bandit>=1.7",
    "pbr>=5.0",
    "types-Markdown>=3.0",
    "types-PyYAML>=6.0",
]
docs = [
    "sphinx>=6.0",
    "sphinx-rtd-theme>=1.2",
    "sphinx-autodoc-typehints>=1.20",
    "sphinxcontrib-jquery>=4.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-xdist>=3.0",
]

[tool.hatch.build]
include = [
    "src/md2pdf",
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
    "AUTHORS",
]

[tool.hatch.build.targets.wheel]
packages = ["src/md2pdf"]

[tool.hatch.build.targets.wheel.shared-data]
"src/md2pdf/assets" = "md2pdf/assets"
"src/md2pdf/styles/templates" = "md2pdf/styles/templates"
"src/md2pdf/themes" = "md2pdf/themes"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=md2pdf",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
allow_untyped_calls = true
allow_untyped_defs = true
exclude = [
    "build",
    "dist",
    "tests",
    "examples",
    "docs",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
    "*.egg-info",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101"]  # Skip assert_used test

[tool.coverage.run]
source = ["src/md2pdf"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
