name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ubuntu-latest-pip-quality-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ubuntu-latest-pip-quality-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check code formatting with Black
      run: |
        echo "üîç Checking code formatting with Black..."
        black --check --diff src/ tests/ || {
          echo "‚ùå Code formatting issues found. Run 'black src/ tests/' to fix."
          exit 1
        }
        echo "‚úÖ Code formatting is correct"

    - name: Check import sorting with isort
      run: |
        echo "üîç Checking import sorting with isort..."
        isort --check-only --diff src/ tests/ || {
          echo "‚ùå Import sorting issues found. Run 'isort src/ tests/' to fix."
          exit 1
        }
        echo "‚úÖ Import sorting is correct"

    - name: Lint code with flake8
      run: |
        echo "üîç Linting code with flake8..."
        flake8 src/ tests/ || {
          echo "‚ùå Linting issues found"
          exit 1
        }
        echo "‚úÖ No linting issues found"

    - name: Type check with mypy
      run: |
        echo "üîç Type checking with mypy..."
        mypy src/md2pdf/ || {
          echo "‚ùå Type checking issues found"
          exit 1
        }
        echo "‚úÖ Type checking passed"

    - name: Security audit with bandit
      run: |
        echo "üîç Running security audit with bandit..."
        bandit -r src/md2pdf/ -f json -o bandit-report.json || {
          echo "‚ùå Security issues found"
          cat bandit-report.json
          exit 1
        }
        echo "‚úÖ No security issues found"

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  pre-commit-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Install package dependencies
      run: |
        pip install -e .

    - name: Run dependency security audit
      run: |
        echo "üîç Auditing dependencies for security vulnerabilities..."
        pip-audit --format=json --output=dependency-audit.json || {
          echo "‚ùå Security vulnerabilities found in dependencies"
          cat dependency-audit.json
          exit 1
        }
        echo "‚úÖ No security vulnerabilities found in dependencies"

    - name: Upload dependency audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-audit-report
        path: dependency-audit.json

  complexity-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install complexity tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon

    - name: Check cyclomatic complexity
      run: |
        echo "üîç Checking cyclomatic complexity..."
        radon cc src/md2pdf/ --min B --show-complexity
        echo "üîç Checking maintainability index..."
        radon mi src/md2pdf/ --min B
        echo "üîç Checking for complex functions..."
        xenon --max-absolute B --max-modules B --max-average A src/md2pdf/ || {
          echo "‚ö†Ô∏è  High complexity detected - consider refactoring"
          exit 1
        }
        echo "‚úÖ Code complexity is acceptable"

  docstring-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install docstring tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle

    - name: Check docstring coverage
      run: |
        echo "üîç Checking docstring coverage..."
        pydocstyle src/md2pdf/ --convention=google || {
          echo "‚ö†Ô∏è  Docstring issues found"
          exit 1
        }
        echo "‚úÖ Docstring coverage is good"

  quality-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, pre-commit-check, dependency-check, complexity-check, docstring-check]
    if: always()

    steps:
    - name: Quality Check Summary
      run: |
        echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-commit | ${{ needs.pre-commit-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependencies | ${{ needs.dependency-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Complexity | ${{ needs.complexity-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docstrings | ${{ needs.docstring-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

        # Fail if any critical checks failed
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "‚ùå Code quality checks failed"
          exit 1
        fi
